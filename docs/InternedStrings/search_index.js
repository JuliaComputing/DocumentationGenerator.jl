var documenterSearchIndex = {"docs": [

{
    "location": "#InternedStrings.intern-Union{Tuple{SubString{T}}, Tuple{T}} where T",
    "page": "Home",
    "title": "InternedStrings.intern",
    "category": "method",
    "text": "Substrings are interned as their parent string type\n\n\n\n\n\n"
},

{
    "location": "#InternedStrings.intern-Union{Tuple{T}, Tuple{Type{T},Any}} where T",
    "page": "Home",
    "title": "InternedStrings.intern",
    "category": "method",
    "text": "intern(::Type{T}, s)\n\nIntern s as if it were type T, converting it if required. Note that this will lead to unexpected behavour if the type of s, and T, do not have equivalent equality and hash functions (i.e. this is not safe if hash(s) != hash(convert(T, s))).\n\n\n\n\n\n"
},

{
    "location": "#InternedStrings.intern-Union{Tuple{T}, Tuple{T}} where T",
    "page": "Home",
    "title": "InternedStrings.intern",
    "category": "method",
    "text": "intern(s::T)\n\nReturn a reference to a interned instance of s, adding it to the interning pool if it did not already exist.\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [InternedStrings]\nOrder = [:type, :function]"
},

]}
