var documenterSearchIndex = {"docs": [

{
    "location": "#AcceleratedArrays.Interval",
    "page": "Home",
    "title": "AcceleratedArrays.Interval",
    "category": "type",
    "text": "Interval(start, stop)\n\nConstruct a closed interval, which is a collection which contains (via in) elements between start and stop (inclusive) according to isless. The collection is abstract in nature and doesn\'t support iteration, indexing, etc.\n\nCan be constructed via the .. function, e.g. 1..3 === Interval(1, 3).\n\nExamples\n\n```julia julia> 2 in Interval(1, 3) true\n\njulia> 3 in Interval(1, 3) true\n\njulia> 4 in Interval(1, 3) false\n\n\n\n\n\n"
},

{
    "location": "#AcceleratedArrays.:..-Union{Tuple{T2}, Tuple{T1}, Tuple{T1,T2}} where T2 where T1",
    "page": "Home",
    "title": "AcceleratedArrays.:..",
    "category": "method",
    "text": "..(start, stop)\nstart..stop\n\nConstructs an Interval(start, stop), which represents the closed interval between start and stop. Intervals are abstract collections which support in but not iteration, indexing, etc.\n\nThe interval includes both the start and stop poitns. To exclude the start or stop from the Interval, use the greaterthan or lessthan function.\n\nExamples\n\n```julia julia> 2 in 1..3 true\n\njulia> 3 in 1..3 true\n\njulia> 4 in 1..3 false\n\njulia> 1 in greaterthan(1)..3 false\n\njulia> 3 in 1..lessthan(3) false\n\n\n\n\n\n"
},

{
    "location": "#AcceleratedArrays.accelerate!-Union{Tuple{T}, Tuple{AbstractArray,Type{T}}} where T<:AbstractIndex",
    "page": "Home",
    "title": "AcceleratedArrays.accelerate!",
    "category": "method",
    "text": "accelerate!(a, IndexType)\n\nReturn an AcceleratedArray wrapping a using the acceleration index of type T.\n\nDepending on the index type, this operation may also modify a. For example a SortIndex will sort! the array a to maximize cache efficiency. The acceleration index will be invalidated (and become unsafe to use) if a is modified directly after the index is constructed. (See also accelerate).\n\n\n\n\n\n"
},

{
    "location": "#AcceleratedArrays.accelerate-Union{Tuple{T}, Tuple{AbstractArray,Type{T}}} where T<:AbstractIndex",
    "page": "Home",
    "title": "AcceleratedArrays.accelerate",
    "category": "method",
    "text": "accelerate(a, IndexType)\n\nReturn an AcceleratedArray wrapping a using the acceleration index of type T.\n\nThis operation will not modify a but the acceleration index will be invalidated (and become unsafe to use) if a is modified directly after the index is constructed. (See also accelerate!).\n\n\n\n\n\n"
},

{
    "location": "#AcceleratedArrays.greaterthan-Tuple{Any}",
    "page": "Home",
    "title": "AcceleratedArrays.greaterthan",
    "category": "method",
    "text": "greaterthan(x)\n\nReturn a value which is immediately larger than x. Than value is almost, but not quite, equal to x - there should be no other values (of any type) in between x and greaterthan(x) according to Julia\'s isless and isequal canonical total ordering.\n\nAmongst other uses, this may be used to create Intervals that exclude the starting point.\n\nSee also lessthan.\n\nExamples\n\njulia> isequal(10, greaterthan(10))\nfalse\n\njulia> isless(10, greaterthan(10))\ntrue\n\njulia> 0 ∈ 0..10\ntrue\n\njulia> 0 ∈ greaterthan(0)..10\nfalse\n\n\n\n\n\n"
},

{
    "location": "#AcceleratedArrays.lessthan-Tuple{Any}",
    "page": "Home",
    "title": "AcceleratedArrays.lessthan",
    "category": "method",
    "text": "lessthan(x)\n\nReturn a value which is immediately smaller than x. Than value is almost, but not quite, equal to x - there should be no other values (of any type) in between x and lessthan(x) according to Julia\'s isless and isequal canonical total ordering.\n\nAmongst other uses, this may be used to create Intervals that exclude the end point.\n\nSee also greaterthan.\n\nExamples\n\njulia> isequal(lessthan(10), 10)\nfalse\n\njulia> isless(lessthan(10), 10)\ntrue\n\njulia> 10 ∈ 0..10\ntrue\n\njulia> 10 ∈ 0..lessthan(10)\nfalse\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [AcceleratedArrays]\nOrder = [:type, :function]"
},

]}
