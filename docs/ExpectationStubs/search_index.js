var documenterSearchIndex = {"docs": [

{
    "location": "#ExpectationStubs.all_expectations_used-Tuple{Stub}",
    "page": "Home",
    "title": "ExpectationStubs.all_expectations_used",
    "category": "method",
    "text": "all_expectations_used(stub::Stub)\n\nChecks that every expectation setup for the stub was actually used. It is good to have this as a sanity check at the end of your test script using the stub.\n\n\n\n\n\n"
},

{
    "location": "#ExpectationStubs.DoNotCare",
    "page": "Home",
    "title": "ExpectationStubs.DoNotCare",
    "category": "type",
    "text": "DoNotCare{T}\n\nA type that is equal to all things that are of type <:T. For internal use. Will interact weirdly with hash based dicts\n\n\n\n\n\n"
},

{
    "location": "#ExpectationStubs.ExpectationValueMismatchError",
    "page": "Home",
    "title": "ExpectationStubs.ExpectationValueMismatchError",
    "category": "type",
    "text": "ExpectationValueMismatchError\n\nSimilar to a julia MethodError This is thrown if a call was made on a stub, but the values/types did not match those that were expected.\n\n\n\n\n\n"
},

{
    "location": "#ExpectationStubs.get_all_matches-Tuple{ExpectationStubs.VectorDict,Any}",
    "page": "Home",
    "title": "ExpectationStubs.get_all_matches",
    "category": "method",
    "text": "get_all_matches(vd::VectorDict, key)\n\nReturns all values matching the key\n\n\n\n\n\n"
},

{
    "location": "#ExpectationStubs.name_argvals_and_sig-Tuple{Any}",
    "page": "Home",
    "title": "ExpectationStubs.name_argvals_and_sig",
    "category": "method",
    "text": "name_argvals_and_sig(defn)\n\nDoes the extraction of these as is needed for @used and @usedcounts\n\n\n\n\n\n"
},

{
    "location": "#ExpectationStubs.onlyesc-Tuple{Any}",
    "page": "Home",
    "title": "ExpectationStubs.onlyesc",
    "category": "method",
    "text": "onlyesc(v)\n\nLike esc, except it ignores things that can not be escaped. Eg literals.\n\nInternal use\n\n\n\n\n\n"
},

{
    "location": "#ExpectationStubs.split_vals_and_sig-Tuple{Any}",
    "page": "Home",
    "title": "ExpectationStubs.split_vals_and_sig",
    "category": "method",
    "text": "split_vals_and_sig(argsexpr)\n\nTakes an expression from a function definition\'s args eg :([a::Int, ::Integer]) and breaks it down into the values, and the types. When value is not given it subsitutes DoNotCare(), when type is not given it subsitutes typeof(val) Returns a tuple of each, with all things in expression/symbol form.\n\nInternal use\n\n\n\n\n\n"
},

{
    "location": "#ExpectationStubs.usecount-Tuple{Stub,Any}",
    "page": "Home",
    "title": "ExpectationStubs.usecount",
    "category": "method",
    "text": "usecount(stub:Stub, arg)\n\nReturns how many times the stub has been called with a matching argument\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [ExpectationStubs]\nOrder = [:type, :function]"
},

]}
