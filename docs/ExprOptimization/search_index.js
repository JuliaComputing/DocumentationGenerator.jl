var documenterSearchIndex = {"docs": [

{
    "location": "#ExprOptimization.ExprOptResult",
    "page": "Home",
    "title": "ExprOptimization.ExprOptResult",
    "category": "type",
    "text": "ExprOptResult\n\nReturned by optimize().  Contains the results of the optimization.\n\n\n\n\n\n"
},

{
    "location": "#ExprOptimization.get_expr-Tuple{ExprOptResult}",
    "page": "Home",
    "title": "ExprOptimization.get_expr",
    "category": "method",
    "text": "get_expr(result::ExprOptResult)\n\nReturns the expression in the result\n\n\n\n\n\n"
},

{
    "location": "#ExprOptimization.optimize",
    "page": "Home",
    "title": "ExprOptimization.optimize",
    "category": "function",
    "text": "optimize(p::ExprOptAlgorithm, grammar::Grammar, typ::Symbol, loss::Function; kwargs...)\n\nMain entry for expression optimization.  Use concrete ExprOptAlgorithm to specify optimization algorithm. Optimize using grammar and start symbol, typ, and loss function.  Loss function has the form: los::Float64=loss(node::RuleNode).\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [ExprOptimization]\nOrder = [:type, :function]"
},

]}
