var documenterSearchIndex = {"docs": [

{
    "location": "#",
    "page": "Readme",
    "title": "Readme",
    "category": "page",
    "text": ""
},

{
    "location": "#ExprOptimization.jl-1",
    "page": "Readme",
    "title": "ExprOptimization.jl",
    "category": "section",
    "text": "Algorithms for the optimization of Julia expressions derived from a grammar.  The following algorithms are implemented:Monte Carlo\nGenetic Programming\nGrammatical Evolution\nCross-Entropy Method\nProbabilistic Incremental Program Execution (PIPE)"
},

{
    "location": "#Main-Dependencies-1",
    "page": "Readme",
    "title": "Main Dependencies",
    "category": "section",
    "text": "sisl/ExprRules.jl"
},

{
    "location": "#Usage-1",
    "page": "Readme",
    "title": "Usage",
    "category": "section",
    "text": "Please see the example notebook."
},

{
    "location": "#Maintainers:-1",
    "page": "Readme",
    "title": "Maintainers:",
    "category": "section",
    "text": "Ritchie Lee, ritchie.lee@sv.cmu.edu\nTim Wheeler, tawheeler@stanford.edu\nMykel Kochenderfer, mykel@stanford.edu(Image: Build Status) (Image: Coverage Status)"
},

{
    "location": "autodocs/#ExprOptimization.ExprOptResult",
    "page": "Docstrings",
    "title": "ExprOptimization.ExprOptResult",
    "category": "type",
    "text": "ExprOptResult\n\nReturned by optimize().  Contains the results of the optimization.\n\n\n\n\n\n"
},

{
    "location": "autodocs/#ExprOptimization.get_expr-Tuple{ExprOptResult}",
    "page": "Docstrings",
    "title": "ExprOptimization.get_expr",
    "category": "method",
    "text": "get_expr(result::ExprOptResult)\n\nReturns the expression in the result\n\n\n\n\n\n"
},

{
    "location": "autodocs/#ExprOptimization.optimize",
    "page": "Docstrings",
    "title": "ExprOptimization.optimize",
    "category": "function",
    "text": "optimize(p::ExprOptAlgorithm, grammar::Grammar, typ::Symbol, loss::Function; kwargs...)\n\nMain entry for expression optimization.  Use concrete ExprOptAlgorithm to specify optimization algorithm. Optimize using grammar and start symbol, typ, and loss function.  Loss function has the form: los::Float64=loss(node::RuleNode).\n\n\n\n\n\n"
},

{
    "location": "autodocs/#",
    "page": "Docstrings",
    "title": "Docstrings",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [ExprOptimization]\nOrder = [:type, :function]"
},

]}
