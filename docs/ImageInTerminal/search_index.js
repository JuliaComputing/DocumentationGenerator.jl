var documenterSearchIndex = {"docs": [

{
    "location": "#ImageInTerminal.colorant2ansi-Tuple{Any}",
    "page": "Home",
    "title": "ImageInTerminal.colorant2ansi",
    "category": "method",
    "text": "colorant2ansi(color::Colorant) -> Int\n\nConverts the given colorant into an integer index that corresponds to the closest 256-colors ANSI code.\n\njulia> colorant2ansi(RGB(1., 1., 0.))\n226\n\nThis function also tries to make good use of the additional number of available shades of gray (ANSI codes 232 to 255).\n\njulia> colorant2ansi(RGB(.5, .5, .5))\n244\n\njulia> colorant2ansi(Gray(.5))\n244\n\n\n\n\n\n"
},

{
    "location": "#ImageInTerminal.imshow",
    "page": "Home",
    "title": "ImageInTerminal.imshow",
    "category": "function",
    "text": "imshow([stream], img, [depth::TermColorDepth], [maxsize])\n\nDisplays the given image img using unicode characters and terminal colors (defaults to 256 colors). img has to be an array of Colorant.\n\nIf working in the REPL, the function tries to choose the encoding based on the current display size. The image will also be downsampled to fit into the display (using restrict).\n\n\n\n\n\n"
},

{
    "location": "#ImageInTerminal.imshow24bit-Tuple{IO,Any,Vararg{Any,N} where N}",
    "page": "Home",
    "title": "ImageInTerminal.imshow24bit",
    "category": "method",
    "text": "imshow24bit([stream], img, [maxsize])\n\nDisplays the given image img using unicode characters and the 24 terminal colors that some modern terminals support. img has to be an array of Colorant.\n\nIf working in the REPL, the function tries to choose the encoding based on the current display size. The image will also be downsampled to fit into the display (using restrict).\n\n\n\n\n\n"
},

{
    "location": "#ImageInTerminal.imshow256-Tuple{IO,Any,Vararg{Any,N} where N}",
    "page": "Home",
    "title": "ImageInTerminal.imshow256",
    "category": "method",
    "text": "imshow256([stream], img, [maxsize])\n\nDisplays the given image img using unicode characters and the widely supported 256 terminal colors. img has to be an array of Colorant.\n\nIf working in the REPL, the function tries to choose the encoding based on the current display size. The image will also be downsampled to fit into the display (using restrict).\n\n\n\n\n\n"
},

{
    "location": "#ImageInTerminal.encodeimg",
    "page": "Home",
    "title": "ImageInTerminal.encodeimg",
    "category": "function",
    "text": "encodeimg(enc::ImageEncoder, colordepth::TermColorDepth, img, [maxheight], [maxwidth])\n\nTransforms the pixel of the given image img, which has to be an array of Colorant, into a string of unicode characters using ansi terminal colors.\n\nThe encoder enc specifies which kind of unicode represenation should be used.\nThe colordepth can either be TermColor256() or TermColor24bit() and specifies which terminal color codes should be used.\nmaxheight and maxwidth specify the maximum numbers of string characters that should be used for the resulting image. Larger images are downscaled automatically using restrict.\n\nThe function returns a tuple with three elements:\n\nA vector of strings containing the encoded image. Each element represent one line. The lines do not contain newline characters.\nNumber of lines in the vector.\nNumber of visible characters per line (the remaining are colorcodes).\n\n\n\n\n\n"
},

{
    "location": "#ImageInTerminal.use_24bit-Tuple{}",
    "page": "Home",
    "title": "ImageInTerminal.use_24bit",
    "category": "method",
    "text": "use_24bit()\n\nTriggers imshow24bit automatically if an array of colorants is to be displayed in the julia REPL. Call ImageInTerminal.use_256() to restore default behaviour.\n\n\n\n\n\n"
},

{
    "location": "#ImageInTerminal.use_256-Tuple{}",
    "page": "Home",
    "title": "ImageInTerminal.use_256",
    "category": "method",
    "text": "use_256()\n\nTriggers imshow256 automatically if an array of colorants is to be displayed in the julia REPL. (This is the default)\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [ImageInTerminal]\nOrder = [:type, :function]"
},

]}
