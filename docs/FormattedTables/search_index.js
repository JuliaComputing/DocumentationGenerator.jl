var documenterSearchIndex = {"docs": [

{
    "location": "#FormattedTables.write",
    "page": "Home",
    "title": "FormattedTables.write",
    "category": "function",
    "text": "FormattedTables.write(\n    file::Union{IO,String},\n    table;\n    delim = \' \',\n    column_names=Tables.schema(table).names,\n    formatters=Dict(name=>\"\" for name in column_names),\n    header_fmt=Dict(name=>\"\" for name in column_names),\n)\n\nWrite a Tables.jl interface input to a stream or a named file using the format specifiers provided via the formatters keyword argument. The formatters argument must be a dictionary, named tuple, or similar collection that can be indexed using the column names of the table.\n\nKeyword arguments include:\n\ndelim: A delimiter to print between list items.\ncolumn_names: An iterable collection containing, in order, the names (as Symbols) of the columns of the table to be written.\nformatters: A dictionary, named tuple, or similar collection that maps  the the names (Symbols) of the columns to be written to a Format.FormatSpec used to format the column.\nheader_fmt: A dictionary, named tuple, or similar collection that maps  the the names (Symbols) of the columns to be written to a Format.FormatSpec used to format the column headers. Set to nothing to skip writing column headers.\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [FormattedTables]\nOrder = [:type, :function]"
},

]}
