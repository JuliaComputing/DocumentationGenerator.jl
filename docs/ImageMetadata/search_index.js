var documenterSearchIndex = {"docs": [

{
    "location": "#ImageMetadata.ImageMeta",
    "page": "Home",
    "title": "ImageMetadata.ImageMeta",
    "category": "type",
    "text": "ImageMeta is an AbstractArray that can have metadata, stored in a dictionary.\n\nConstruct an image with ImageMeta(A, props) (for a properties dictionary props), or with ImageMeta(A, prop1=val1, prop2=val2, ...).\n\n\n\n\n\n"
},

{
    "location": "#ImageAxes.data-Tuple{ImageMeta}",
    "page": "Home",
    "title": "ImageAxes.data",
    "category": "method",
    "text": "data(img::ImageMeta) -> array\n\nExtract the data from img, omitting the properties dictionary. array shares storage with img, so changes to one affect the other.\n\nSee also: properties.\n\n\n\n\n\n"
},

{
    "location": "#ImageMetadata.copyproperties-Tuple{ImageMeta,AbstractArray}",
    "page": "Home",
    "title": "ImageMetadata.copyproperties",
    "category": "method",
    "text": "copyproperties(img::ImageMeta, data) -> imgnew\n\nCreate a new \"image,\" copying the properties dictionary of img but using the data of the AbstractArray data. Note that changing the properties of imgnew does not affect the properties of img.\n\nSee also: shareproperties.\n\n\n\n\n\n"
},

{
    "location": "#ImageMetadata.properties-Tuple{ImageMeta}",
    "page": "Home",
    "title": "ImageMetadata.properties",
    "category": "method",
    "text": "properties(imgmeta) -> props\n\nExtract the properties dictionary props for imgmeta. props shares storage with img, so changes to one affect the other.\n\nSee also: data.\n\n\n\n\n\n"
},

{
    "location": "#ImageMetadata.shareproperties-Tuple{ImageMeta,AbstractArray}",
    "page": "Home",
    "title": "ImageMetadata.shareproperties",
    "category": "method",
    "text": "shareproperties(img::ImageMeta, data) -> imgnew\n\nCreate a new \"image,\" reusing the properties dictionary of img but using the data of the AbstractArray data. The two images have synchronized properties; modifying one also affects the other.\n\nSee also: copyproperties.\n\n\n\n\n\n"
},

{
    "location": "#ImageMetadata.spatialproperties-Tuple{ImageMeta}",
    "page": "Home",
    "title": "ImageMetadata.spatialproperties",
    "category": "method",
    "text": "spatialproperties(img)\n\nReturn a vector of strings, containing the names of properties that have been declared \"spatial\" and hence should be permuted when calling permutedims.  Declare such properties like this:\n\nimg[\"spatialproperties\"] = [\"spacedirections\"]\n\n\n\n\n\n"
},

{
    "location": "#Base.permutedims",
    "page": "Home",
    "title": "Base.permutedims",
    "category": "function",
    "text": "permutedims(img, perm, [spatialprops])\n\nWhen permuting the dimensions of an ImageMeta, you can optionally specify that certain properties are spatial and they will also be permuted. spatialprops defaults to spatialproperties(img).\n\n\n\n\n\n"
},

{
    "location": "#ImageCore.spacedirections-Tuple{ImageMeta}",
    "page": "Home",
    "title": "ImageCore.spacedirections",
    "category": "method",
    "text": "spacedirections(img)\n\nUsing ImageMetadata, you can set this property manually. For example, you could indicate that a photograph was taken with the camera tilted 30-degree relative to vertical using\n\nimg[\"spacedirections\"] = ((0.866025,-0.5),(0.5,0.866025))\n\nIf not specified, it will be computed from pixelspacing(img), placing the spacing along the \"diagonal\".  If desired, you can set this property in terms of physical units, and each axis can have distinct units.\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [ImageMetadata]\nOrder = [:type, :function]"
},

]}
