var documenterSearchIndex = {"docs": [

{
    "location": "#CUDAapi.find_binary-Tuple{Array{String,1}}",
    "page": "Home",
    "title": "CUDAapi.find_binary",
    "category": "method",
    "text": "find_binary(names; locations=String[])\n\nSimilar to find_library, performs an exhaustive search for a binary in various subdirectories of locations, and finally PATH.\n\n\n\n\n\n"
},

{
    "location": "#CUDAapi.find_libdevice-Tuple{Array{VersionNumber,1},Any}",
    "page": "Home",
    "title": "CUDAapi.find_libdevice",
    "category": "method",
    "text": "find_libdevice(targets::Vector{VersionNumber}, toolkit_dirs::Vector{String})\n\nLook for the CUDA device library supporting targets in any of the CUDA toolkit directories toolkit_dirs. On CUDA >= 9.0, a single library unified library is discovered and returned as a string. On older toolkits, individual libraries for each of the targets are returned as a vector of strings.\n\n\n\n\n\n"
},

{
    "location": "#CUDAapi.find_library-Tuple{Array{String,1}}",
    "page": "Home",
    "title": "CUDAapi.find_library",
    "category": "method",
    "text": "find_library(names; locations=String[], versions=VersionNumber[], word_size=Sys.WORD_SIZE)\n\nWrapper for Libdl.find_library, performing a more exhaustive search:\n\nvariants of the library name (including version numbers, platform-specific tags, etc);\nvarious subdirectories of the locations list, and finally system library directories.\n\nReturns the full path to the library.\n\n\n\n\n\n"
},

{
    "location": "#CUDAapi.find_toolkit-Tuple{}",
    "page": "Home",
    "title": "CUDAapi.find_toolkit",
    "category": "method",
    "text": "find_toolkit()::Vector{String}\n\nLook for directories where (parts of) the CUDA toolkit might be installed. This returns a (possibly empty) list of paths that can be used as an argument to other discovery functions.\n\nThe behavior of this function can be overridden by defining the CUDA_PATH, CUDA_HOME or CUDA_ROOT environment variables, which should point to the root of the CUDA toolkit.\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [CUDAapi]\nOrder = [:type, :function]"
},

]}
