var documenterSearchIndex = {"docs": [

{
    "location": "#",
    "page": "Readme",
    "title": "Readme",
    "category": "page",
    "text": ""
},

{
    "location": "#DiffEqPhysics-1",
    "page": "Readme",
    "title": "DiffEqPhysics",
    "category": "section",
    "text": "(Image: Join the chat at https://gitter.im/JuliaDiffEq/Lobby) (Image: Build Status) (Image: Build status) (Image: Coverage Status) (Image: codecov.io) (Image: DiffEqPhysics)"
},

{
    "location": "#Simulation-of-gravitationally-interacting-bodies-1",
    "page": "Readme",
    "title": "Simulation of gravitationally interacting bodies",
    "category": "section",
    "text": "In order to create bodies/particles for the problem, one needs to use the MassBody structure and its constructor, which accepts mass, initial coordinates and velocity of the body.body1 = MassBody(2.0, SVector(0.0, 1.0, 0.0), SVector( 5.775e-6, 0.0, 0.0))\nbody2 = MassBody(2.0, SVector(0.0,-1.0, 0.0), SVector(-5.775e-6, 0.0, 0.0))Usually we solve an n-body problem for a certain period of time:tspan = (0.0, 1111150.0);Solving gravitational problem one needs to specify the gravitational constant G.G = 6.673e-11In fact, now we have enough parameters to create an NBodyGravProblem object:problem = NBodyGravProblem([body1,body2], G, tspan)Solution to the problem might be evaluated using the standard solve function:solution = solve(problem, Tsit5());And, finally, we plot our solution showing two equal bodies rotating on the same orbit:plot_xy_scattering(solution,\"./anim_two_boddies_scattering.gif\")<img src=\"https://user-images.githubusercontent.com/16945627/39958539-d2cf779c-561d-11e8-96a8-ffc3a595be8b.gif\" alt=\"Here should appear a gif of rotating bodies\" width=\"350\"/>"
},

{
    "location": "autodocs/#",
    "page": "Docstrings",
    "title": "Docstrings",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [DiffEqPhysics]\nOrder = [:type, :function]"
},

]}
