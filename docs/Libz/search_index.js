var documenterSearchIndex = {"docs": [

{
    "location": "#Libz.ZlibDeflateInputStream-Tuple{Any}",
    "page": "Home",
    "title": "Libz.ZlibDeflateInputStream",
    "category": "method",
    "text": "ZlibDeflateInputStream(input[; <keyword arguments>])\n\nConstruct a zlib deflate input stream to compress gzip/zlib data.\n\nArguments\n\ninput: a byte vector, IO object, or BufferedInputStream containing data to compress.\nbufsize::Integer=8192: input and output buffer size.\nraw::Bool=false: if true, data is raw compress data, without zlib metadata\ngzip::Bool=true: if true, data is gzip compressed; if false, zlib compressed.\nlevel::Integer=6: compression level in 1-9.\nmem_level::Integer=8: memory to use for compression in 1-9.\nstrategy=Z_DEFAULT_STRATEGY: compression strategy; see zlib documentation.\n\n\n\n\n\n"
},

{
    "location": "#Libz.ZlibDeflateOutputStream-Tuple{Any}",
    "page": "Home",
    "title": "Libz.ZlibDeflateOutputStream",
    "category": "method",
    "text": "ZlibDeflateOutputStream(output[; <keyword arguments>])\n\nConstruct a zlib deflate output stream to compress gzip/zlib data.\n\nArguments\n\noutput: a byte vector, IO object, or BufferedInputStream to which compressed data should be written.\nbufsize::Integer=8192: input and output buffer size.\nraw::Bool=false: if true, data is raw compress data, without zlib metadata\ngzip::Bool=true: if true, data is gzip compressed; if false, zlib compressed.\nlevel::Integer=6: compression level in 1-9.\nmem_level::Integer=8: memory to use for compression in 1-9.\nstrategy=Z_DEFAULT_STRATEGY: compression strategy; see zlib documentation.\n\n\n\n\n\n"
},

{
    "location": "#Libz.ZlibInflateInputStream-Tuple{Any}",
    "page": "Home",
    "title": "Libz.ZlibInflateInputStream",
    "category": "method",
    "text": "ZlibInflateInputStream(input[; <keyword arguments>])\n\nConstruct a zlib inflate input stream to decompress gzip/zlib data.\n\nArguments\n\ninput: a byte vector, IO object, or BufferedInputStream containing compressed data to inflate.\nbufsize::Integer=8192: input and output buffer size.\nraw::Bool=falso: if true, data is raw compress data, without zlib metadata\ngzip::Bool=true: if true, data is gzip compressed; if false, zlib compressed.\nreset_on_end::Bool=true: on stream end, try to find the start of another stream.\n\n\n\n\n\n"
},

{
    "location": "#Libz.ZlibInflateOutputStream-Tuple{Any}",
    "page": "Home",
    "title": "Libz.ZlibInflateOutputStream",
    "category": "method",
    "text": "ZlibInflateOutputStream(output[; <keyword arguments>])\n\nConstruct a zlib inflate output stream to decompress gzip/zlib data.\n\nArguments\n\noutput: a byte vector, IO object, or BufferedInputStream to which decompressed data should be written.\nbufsize::Integer=8192: input and output buffer size.\nraw::Bool=false: if true, data is raw compress data, without zlib metadata\ngzip::Bool=true: if true, data is gzip compressed; if false, zlib compressed.\n\n\n\n\n\n"
},

{
    "location": "#Libz.adler32",
    "page": "Home",
    "title": "Libz.adler32",
    "category": "function",
    "text": "adler32(data)\n\nCompute the Adler-32 checksum over the data input. data can be BufferedInputStream or Vector{UInt8}.\n\n\n\n\n\n"
},

{
    "location": "#Libz.crc32",
    "page": "Home",
    "title": "Libz.crc32",
    "category": "function",
    "text": "crc32(data)\n\nCompute the CRC-32 checksum over the data input. data can be BufferedInputStream or Vector{UInt8}.\n\n\n\n\n\n"
},

{
    "location": "#Libz.Sink",
    "page": "Home",
    "title": "Libz.Sink",
    "category": "type",
    "text": "The mode type parameter must be either :inflate or :deflate.\n\n\n\n\n\n"
},

{
    "location": "#Libz.Source",
    "page": "Home",
    "title": "Libz.Source",
    "category": "type",
    "text": "The mode type parameter must be either :inflate or :deflate.\n\n\n\n\n\n"
},

{
    "location": "#BufferedStreams.readbytes!-Union{Tuple{mode}, Tuple{Source{mode,T} where T<:BufferedInputStream,Array{UInt8,1},Int64,Int64}} where mode",
    "page": "Home",
    "title": "BufferedStreams.readbytes!",
    "category": "method",
    "text": "readbytes!(source, buffer, from, to)\n\nRead bytes from the zlib stream to a buffer. Satisfies the BufferedStreams source interface.\n\n\n\n\n\n"
},

{
    "location": "#BufferedStreams.writebytes-Union{Tuple{mode}, Tuple{Sink{mode,T} where T<:BufferedOutputStream,Array{UInt8,1},Int64,Bool}} where mode",
    "page": "Home",
    "title": "BufferedStreams.writebytes",
    "category": "method",
    "text": "writebytes(sink, buffer, n, eof)\n\nWrite some bytes from a given buffer. Satisfies the BufferedStreams sink interface.\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [Libz]\nOrder = [:type, :function]"
},

]}
