var documenterSearchIndex = {"docs": [

{
    "location": "#CodecXz.XzCompressor-Tuple{}",
    "page": "Home",
    "title": "CodecXz.XzCompressor",
    "category": "method",
    "text": "XzCompressor(;level=6, check=LZMA_CHECK_CRC64)\n\nCreate an xz compression codec.\n\nArguments\n\nlevel: compression level (0..9)\ncheck: integrity check type (LZMA_CHECK_{NONE,CRC32,CRC64,SHA256})\n\n\n\n\n\n"
},

{
    "location": "#CodecXz.XzCompressorStream-Tuple{IO}",
    "page": "Home",
    "title": "CodecXz.XzCompressorStream",
    "category": "method",
    "text": "XzCompressorStream(stream::IO; kwargs...)\n\nCreate an xz compression stream (see XzCompressor for kwargs).\n\n\n\n\n\n"
},

{
    "location": "#CodecXz.XzDecompressor-Tuple{}",
    "page": "Home",
    "title": "CodecXz.XzDecompressor",
    "category": "method",
    "text": "XzDecompressor(;memlimit=18446744073709551615, flags=LZMA_CONCATENATED)\n\nCreate an xz decompression codec.\n\nArguments\n\nmemlimit: memory usage limit as bytes\nflags: decoder flags\n\n\n\n\n\n"
},

{
    "location": "#CodecXz.XzDecompressorStream-Tuple{IO}",
    "page": "Home",
    "title": "CodecXz.XzDecompressorStream",
    "category": "method",
    "text": "XzDecompressorStream(stream::IO; kwargs...)\n\nCreate an xz decompression stream (see XzDecompressor for kwargs).\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [CodecXz]\nOrder = [:type, :function]"
},

]}
