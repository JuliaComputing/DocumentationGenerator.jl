var documenterSearchIndex = {"docs": [

{
    "location": "#LIBSVM.LinearSVC",
    "page": "Home",
    "title": "LIBSVM.LinearSVC",
    "category": "type",
    "text": "Linear SVM using LIBLINEAR\n\n\n\n\n\n"
},

{
    "location": "#LIBSVM.svmpredict-Union{Tuple{U}, Tuple{T}, Tuple{SVM{T},AbstractArray{U,2}}} where U<:Real where T",
    "page": "Home",
    "title": "LIBSVM.svmpredict",
    "category": "method",
    "text": "svmpredict{T,U<:Real}(model::SVM{T}, X::AbstractMatrix{U})\n\nPredict values using model based on data X. The shape of X needs to be (nfeatures, nsamples). The method returns tuple (predictions, decisionvalues).\n\n\n\n\n\n"
},

{
    "location": "#LIBSVM.svmtrain-Union{Tuple{AbstractArray{U,2}}, Tuple{U}, Tuple{T}, Tuple{AbstractArray{U,2},AbstractArray{T,1}}} where U<:Real where T",
    "page": "Home",
    "title": "LIBSVM.svmtrain",
    "category": "method",
    "text": "svmtrain{T, U<:Real}(X::AbstractMatrix{U}, y::AbstractVector{T}=[];\n    svmtype::Type=SVC, kernel::Kernel.KERNEL=Kernel.RadialBasis, degree::Integer=3,\n    gamma::Float64=1.0/size(X, 1), coef0::Float64=0.0,\n    cost::Float64=1.0, nu::Float64=0.5, epsilon::Float64=0.1,\n    tolerance::Float64=0.001, shrinking::Bool=true,\n    probability::Bool=false, weights::Union{Dict{T, Float64}, Compat.Nothing}=nothing,\n    cachesize::Float64=200.0, verbose::Bool=false)\n\nTrain Support Vector Machine using LIBSVM using response vector y and training data X. The shape of X needs to be (nfeatures, nsamples). For one-class SVM use only X.\n\nArguments\n\nsvmtype::Type=LIBSVM.SVC: Type of SVM to train SVC (for C-SVM), NuSVC   OneClassSVM, EpsilonSVR or NuSVR. Defaults to OneClassSVM if   y is not used.\nkernel::Kernels.KERNEL=Kernel.RadialBasis: Model kernel Linear, polynomial,   RadialBasis, Sigmoid or Precomputed.\ndegree::Integer=3: Kernel degree. Used for polynomial kernel\ngamma::Float64=1.0/size(X, 1) : Î³ for kernels\ncoef0::Float64=0.0: parameter for sigmoid and polynomial kernel\ncost::Float64=1.0: cost parameter C of C-SVC, epsilon-SVR, and nu-SVR\nnu::Float64=0.5: parameter nu of nu-SVC, one-class SVM, and nu-SVR\nepsilon::Float64=0.1: epsilon in loss function of epsilon-SVR\ntolerance::Float64=0.001: tolerance of termination criterion\nshrinking::Bool=true: whether to use the shrinking heuristics\nprobability::Bool=false: whether to train a SVC or SVR model for probability estimates\nweights::Union{Dict{T, Float64}, Compat.Nothing}=nothing: dictionary of class weights\ncachesize::Float64=100.0: cache memory size in MB\nverbose::Bool=false: print training output from LIBSVM if true\nnt::Integer=0: number of OpenMP cores to use, if 0 it is set to OMPNUMTHREADS, if negative it is set to the max number of threads\n\nConsult LIBSVM documentation for advice on the choise of correct parameters and model tuning.\n\n\n\n\n\n"
},

{
    "location": "#LIBSVM.svmmodel-Tuple{LIBSVM.SVM}",
    "page": "Home",
    "title": "LIBSVM.svmmodel",
    "category": "method",
    "text": "Convert SVM model to libsvm struct for prediction\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [LIBSVM]\nOrder = [:type, :function]"
},

]}
