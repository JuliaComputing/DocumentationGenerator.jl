var documenterSearchIndex = {"docs": [

{
    "location": "#",
    "page": "Readme",
    "title": "Readme",
    "category": "page",
    "text": ""
},

{
    "location": "#ORCA.jl-1",
    "page": "Readme",
    "title": "ORCA.jl",
    "category": "section",
    "text": "(Image: Build Status)Julia interface to plotly\'s ORCA tool for generating static files based on plotly graph specs."
},

{
    "location": "#Usage-1",
    "page": "Readme",
    "title": "Usage",
    "category": "section",
    "text": "There is a single exported function savefig. After loading PlotlyBase.jl or PlotlyJS.jl and creating a plot named p you can call savefig(p::Union{Plot,SyncPlot}, filename::String; options...) to save the plot in p to a file named filename. See docstring for a description of options."
},

{
    "location": "autodocs/#PlotlyBase.savefig-Tuple{PlotlyBase.Plot,AbstractString}",
    "page": "Docstrings",
    "title": "PlotlyBase.savefig",
    "category": "method",
    "text": "savefig(p::Plot, fn::AbstractString; format=nothing, scale=nothing,\nwidth=nothing, height=nothing)\n\nSave a plot p to a file named fn. If format is given and is one of (png, jpeg, webp, svg, pdf, eps), it will be the format of the file. By default the format is guessed from the extension of fn. scale sets the image scale. width and height set the dimensions, in pixels. Defaults are taken from p.layout, or supplied by plotly\n\n\n\n\n\n"
},

{
    "location": "autodocs/#",
    "page": "Docstrings",
    "title": "Docstrings",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [ORCA]\nOrder = [:type, :function]"
},

]}
