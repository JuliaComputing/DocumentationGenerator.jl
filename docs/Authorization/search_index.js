var documenterSearchIndex = {"docs": [

{
    "location": "#Authorization.AbstractClient",
    "page": "Home",
    "title": "Authorization.AbstractClient",
    "category": "type",
    "text": "Required fields:\n\nid::String;\nid2permission::Dict{String, Permission};        # Resource ID => Permission\nidpattern2permission::Dict{Regex, Permission};  # Resource ID pattern => Permission\ntype2permission::Dict{DataType, Permission};    # Resource type => Permission\n\n\n\n\n\n"
},

{
    "location": "#Authorization.AbstractResource",
    "page": "Home",
    "title": "Authorization.AbstractResource",
    "category": "type",
    "text": "Required fields:\n\nid::String\n\n\n\n\n\n"
},

{
    "location": "#Authorization.create!-Union{Tuple{R}, Tuple{C}, Tuple{C,R,Vararg{Any,N} where N}} where R<:AbstractResource where C<:AbstractClient",
    "page": "Home",
    "title": "Authorization.create!",
    "category": "method",
    "text": "Create resource. If successful return nothing, else return an error message as a String.\n\n\n\n\n\n"
},

{
    "location": "#Authorization.getpermission-Union{Tuple{R}, Tuple{C}, Tuple{C,R}} where R<:AbstractResource where C<:AbstractClient",
    "page": "Home",
    "title": "Authorization.getpermission",
    "category": "method",
    "text": "Returns the Permission object for client-resource combination if it exists, else returns nothing.\n\n\n\n\n\n"
},

{
    "location": "#Authorization.haspermission-Union{Tuple{R}, Tuple{C}, Tuple{C,R,Symbol}} where R<:AbstractResource where C<:AbstractClient",
    "page": "Home",
    "title": "Authorization.haspermission",
    "category": "method",
    "text": "Returns true if the client has permission to act on the resource according to the given action.\n\nAction ust be one of :create, :read, :update, :delete.\n\n\n\n\n\n"
},

{
    "location": "#Authorization.setexpiry!-Union{Tuple{C}, Tuple{C,DateTime}} where C<:AbstractClient",
    "page": "Home",
    "title": "Authorization.setexpiry!",
    "category": "method",
    "text": "Set the expiry of every permission of the client to the given expiry.\n\n\n\n\n\n"
},

{
    "location": "#Authorization.update!-Union{Tuple{R}, Tuple{C}, Tuple{C,R,Vararg{Any,N} where N}} where R<:AbstractResource where C<:AbstractClient",
    "page": "Home",
    "title": "Authorization.update!",
    "category": "method",
    "text": "Update resource. If successful return nothing, else return an error message as a String.\n\n\n\n\n\n"
},

{
    "location": "#Base.delete!-Union{Tuple{R}, Tuple{C}, Tuple{C,R}} where R<:AbstractResource where C<:AbstractClient",
    "page": "Home",
    "title": "Base.delete!",
    "category": "method",
    "text": "Delete resource. If successful return nothing, else return an error message as a String.\n\n\n\n\n\n"
},

{
    "location": "#Base.read-Union{Tuple{R}, Tuple{C}, Tuple{C,R}} where R<:AbstractResource where C<:AbstractClient",
    "page": "Home",
    "title": "Base.read",
    "category": "method",
    "text": "Read resource. If successful return (true, value), else return (false, errormessage::String).\n\n\n\n\n\n"
},

{
    "location": "#Authorization.permisssions_conflict-Union{Tuple{C}, Tuple{C,String}} where C<:AbstractClient",
    "page": "Home",
    "title": "Authorization.permisssions_conflict",
    "category": "method",
    "text": "Returns true if more than one resource ID pattern matches the resource ID.\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [Authorization]\nOrder = [:type, :function]"
},

]}
