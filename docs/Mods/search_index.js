var documenterSearchIndex = {"docs": [

{
    "location": "#Mods.Mod",
    "page": "Home",
    "title": "Mods.Mod",
    "category": "type",
    "text": "Mod(v,m) creates a modular number in mod m with value v%m. Mod(m) is equivalent to Mod(0,m).\n\n\n\n\n\n"
},

{
    "location": "#Base.inv-Tuple{Mod}",
    "page": "Home",
    "title": "Base.inv",
    "category": "method",
    "text": "inv(x::Mod) gives the multiplicative inverse of x. This may be abbreviated by x\'.\n\n\n\n\n\n"
},

{
    "location": "#Mods.CRT-Tuple{Vararg{Mod,N} where N}",
    "page": "Home",
    "title": "Mods.CRT",
    "category": "method",
    "text": "CRT(m1,m2,...): Chinese Remainder Theorem\n\njulia> CRT( Mod(4,11), Mod(8,14) )\nMods.Mod(92,154)\n\njulia> 92%11\n4\n\njulia> 92%14\n8\n\n\n\n\n\n"
},

{
    "location": "#Mods.is_invertible-Tuple{Mod}",
    "page": "Home",
    "title": "Mods.is_invertible",
    "category": "method",
    "text": "is_invertible(x::Mod) determines if x is invertible.\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [Mods]\nOrder = [:type, :function]"
},

]}
