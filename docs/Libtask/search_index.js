var documenterSearchIndex = {"docs": [

{
    "location": "#Libtask.TArray",
    "page": "Home",
    "title": "Libtask.TArray",
    "category": "type",
    "text": "TArray{T}(dims, ...)\n\nImplementation of data structures that automatically perform copy-on-write after task copying.\n\nIf currenttask is an existing key in s, then return `s[currenttask]. Otherwise, returns[currenttask] = s[lasttask]`.\n\nUsage:\n\nTArray(dim)\n\nExample:\n\nta = TArray(4)              # init\nfor i in 1:4 ta[i] = i end  # assign\nArray(ta)                   # convert to 4-element Array{Int64,1}: [1, 2, 3, 4]\n\n\n\n\n\n"
},

{
    "location": "#Libtask.tfill-Tuple{Real,Any}",
    "page": "Home",
    "title": "Libtask.tfill",
    "category": "method",
    "text": " tfill(val, dim, ...)\n\nConstruct a TArray of a specified value.\n\ntfill(val, dim)\n\nExample:\n\ntz = tfill(9.0, 4)            # construct\nArray(tz)                     # convert to 4-element Array{Float64,1}:  [9.0  9.0  9.0  9.0]\n\n\n\n\n\n"
},

{
    "location": "#Libtask.tzeros-Tuple{Type,Any}",
    "page": "Home",
    "title": "Libtask.tzeros",
    "category": "method",
    "text": " tzeros(dims, ...)\n\nConstruct a distributed array of zeros. Trailing arguments are the same as those accepted by TArray.\n\ntzeros(dim)\n\nExample:\n\ntz = tzeros(4)              # construct\nArray(tz)                   # convert to 4-element Array{Int64,1}: [0, 0, 0, 0]\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [Libtask]\nOrder = [:type, :function]"
},

]}
