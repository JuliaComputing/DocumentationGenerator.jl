var documenterSearchIndex = {"docs": [

{
    "location": "#Hungarian.hungarian-Tuple{AbstractArray{T,2} where T}",
    "page": "Home",
    "title": "Hungarian.hungarian",
    "category": "method",
    "text": "hungarian(costMat) -> (assignment, cost)\n\nFind an optimal solution of the rectangular assignment problem represented by the N x M matrix costMat. Return the optimal column indices and corresponding minimal cost.\n\nThe costMat[n,m] denotes the cost to assign the nth worker to the mth job. The zero element in the return value assignment means that these workers have no assigned job.\n\nElements in the matrix can be set to missing. In this case, the corresponding matching cannot be considered by the algorithm.\n\nExamples\n\njulia> A = [ 24     1     8;\n              5     7    14;\n              6    13    20;\n             12    19    21;\n             18    25     2];\n\njulia> assignment, cost = hungarian(A)\n([2,1,0,0,3],8)\n\njulia> assignment, cost = hungarian(A\')\n([2,1,5],8)\n\njulia> using Missings\n\njulia> costMat = [ missing  1   1\n                      1     0   1\n                      1     1   0 ]\n3×3 Array{Union{Float64, Missings.Missing},2}:\nmissing  1.0  1.0\n  1.0    0.0  1.0\n  1.0    1.0  0.0\n\njulia> hungarian(costMat)\n([2, 1, 3], 2)\n\n\n\n\n\n"
},

{
    "location": "#Hungarian.exit_criteria-Tuple{Any,Any}",
    "page": "Home",
    "title": "Hungarian.exit_criteria",
    "category": "method",
    "text": "exit_criteria(colCovered, ZsDims) -> stepNum\n\nWe adjust Munkres\'s algorithm in order to deal with rectangular matrices, so only K columns are counted here, where K = min(size(Zs))\n\n\n\n\n\n"
},

{
    "location": "#Hungarian.munkres!-Union{Tuple{AbstractArray{T,2}}, Tuple{T}} where T<:Real",
    "page": "Home",
    "title": "Hungarian.munkres!",
    "category": "method",
    "text": "munkres!(costMat) -> Zs\n\nIdentical to munkres, except that it directly modifies its input matrix costMat instead of allocating a copy. As a result, the value of this matrix in the caller code will be modified and should therefore no more be used! This function should rather be used by advanced users to improve performance of critical code.\n\n\n\n\n\n"
},

{
    "location": "#Hungarian.munkres-Union{Tuple{AbstractArray{T,2}}, Tuple{T}} where T<:Real",
    "page": "Home",
    "title": "Hungarian.munkres",
    "category": "method",
    "text": "munkres(costMat) -> Zs\n\nFind an optimal solution of the assignment problem represented by the square matrix costMat. Return an sparse matrix illustrating the optimal matching.\n\nExamples\n\njulia> costMat = ones(3, 3) - eye(3, 3)\n3×3 Array{Float64,2}:\n 0.0  1.0  1.0\n 1.0  0.0  1.0\n 1.0  1.0  0.0\n\njulia> matching = Hungarian.munkres(costMat)\n3×3 sparse matrix with 3 Int64 nonzero entries:\n	[1, 1]  =  2\n	[2, 2]  =  2\n	[3, 3]  =  2\n\njulia> full(matching)\n3×3 Array{Int64,2}:\n 2  0  0\n 0  2  0\n 0  0  2\n\n\n\n\n\n"
},

{
    "location": "#Hungarian.step1!-NTuple{5,Any}",
    "page": "Home",
    "title": "Hungarian.step1!",
    "category": "method",
    "text": "Step 1 of the original Munkres\' Assignment Algorithm\n\n\n\n\n\n"
},

{
    "location": "#Hungarian.step2!-NTuple{6,Any}",
    "page": "Home",
    "title": "Hungarian.step2!",
    "category": "method",
    "text": "Step 2 of the original Munkres\' Assignment Algorithm\n\n\n\n\n\n"
},

{
    "location": "#Hungarian.step3!-Union{Tuple{T}, Tuple{AbstractArray{T,2},Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}} where T<:Real",
    "page": "Home",
    "title": "Hungarian.step3!",
    "category": "method",
    "text": "Step 3 of the original Munkres\' Assignment Algorithm\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [Hungarian]\nOrder = [:type, :function]"
},

]}
