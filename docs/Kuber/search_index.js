var documenterSearchIndex = {"docs": [

{
    "location": "#",
    "page": "Readme",
    "title": "Readme",
    "category": "page",
    "text": ""
},

{
    "location": "#Kuber-1",
    "page": "Readme",
    "title": "Kuber",
    "category": "section",
    "text": "(Image: Build Status) (Image: Coverage Status) (Image: codecov.io)A Julia Kubernetes Client.An easy to use API to access Kubernetes clusters from Julia. The Kuber.Kubernetes submodule has the complete set of low level APIs and entities.Most of the low level APIs fit into a common usage pattern. Kuber.jl makes it possible to use all of them with only a few intuitive verb based APIs. Verbs act on entities. Entities can be identified by names or selector patterns, or otherwise can apply to all entities of that class. Verbs can take additional parameters, e.g. when creating or updating entities.API and Entity naming convention follows the standard Kubernetes API and Model naming conventions."
},

{
    "location": "#Entities:-1",
    "page": "Readme",
    "title": "Entities:",
    "category": "section",
    "text": "Any Kubernetes entity supported. APIs identify an entity by symbol named as per Kubernetes naming convention.:Namespace\n:Pod\n:ReplicationController\n:Service\n:PersistentVolume\n:Job\n..."
},

{
    "location": "#Methods/Verbs:-1",
    "page": "Readme",
    "title": "Methods/Verbs:",
    "category": "section",
    "text": "Kubernetes APIs are mapped to these easy to use verbs, familiar to Julia users.get: list or fetch entities\nput!: create entities\nupdate!: update existing entities\ndelete!: delete existing entities\nsel: creates a label selector to use with other verbsAll verbs have the signature: verb(ctx::KuberContext, T::Symbol, args...; kwargs...)."
},

{
    "location": "#Helper-methods:-1",
    "page": "Readme",
    "title": "Helper methods:",
    "category": "section",
    "text": "A Kubernetes context can be manipulated with:set_server: Set the API server location\nset_ns: Set the namespace to deal withOther convenience methods:kuber_type: identify the Julia object corresponding to the Kubernetes specification\nkuber_obj: instantiate a Julia object from for the supplied Kubernetes specification"
},

{
    "location": "#References:-1",
    "page": "Readme",
    "title": "References:",
    "category": "section",
    "text": "API conventions: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md\"\nAPI: https://kubernetes.io/docs/concepts/overview/kubernetes-api/\""
},

{
    "location": "autodocs/#Kuber.get_logs-Tuple{KuberContext,String}",
    "page": "Docstrings",
    "title": "Kuber.get_logs",
    "category": "method",
    "text": "Fetch logs of the specified Pod\n\nParameters:\n\nname::String (required)\n\nKeyword Args:\n\ncontainer::String : The container for which to stream logs. Defaults to only container if there is one container in the pod.\nfollow::Bool : Follow the log stream of the pod. Defaults to false.\nlimitBytes::Int32 : If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.\npretty::String : If \'true\', then the output is pretty printed.\nprevious::Bool : Return previous terminated container logs. Defaults to false.\nsinceSeconds::Int32 : A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.\nsinceTime::String : An RFC3339 timestamp from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.\ntailLines::Int32 : If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime\ntimestamps::Bool : If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.\n\nReturns: String of all log entries, one per line\n\n\n\n\n\n"
},

{
    "location": "autodocs/#",
    "page": "Docstrings",
    "title": "Docstrings",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [Kuber]\nOrder = [:type, :function]"
},

]}
