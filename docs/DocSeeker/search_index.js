var documenterSearchIndex = {"docs": [

{
    "location": "#DocSeeker.alldocs-Tuple{}",
    "page": "Home",
    "title": "DocSeeker.alldocs",
    "category": "method",
    "text": "alldocs() -> Vector{DocObj}\n\nFind all docstrings in all currently loaded Modules.\n\n\n\n\n\n"
},

{
    "location": "#DocSeeker.baseURL-Tuple{Array{Markdown.Link,1}}",
    "page": "Home",
    "title": "DocSeeker.baseURL",
    "category": "method",
    "text": "baseURL(links::Vector{Markdown.Link}) -> String\n\nFind the most common host and return the first URL in links with that host.\n\n\n\n\n\n"
},

{
    "location": "#DocSeeker.createdocsdb-Tuple{}",
    "page": "Home",
    "title": "DocSeeker.createdocsdb",
    "category": "method",
    "text": "createdocsdb()\n\nAsynchronously create a \"database\" of all local docstrings in Pkg.dir(). This is done by loading all packages and using introspection to retrieve the docstrings â€“ the obvious limitation is that only packages that actually load without errors are considered.\n\n\n\n\n\n"
},

{
    "location": "#DocSeeker.docsdir-Tuple{Any}",
    "page": "Home",
    "title": "DocSeeker.docsdir",
    "category": "method",
    "text": "docsdir(pkg) -> String\n\nFind the directory conataining the documenatation for package pkg. Will fall back to returning a package\'s README.md. Returns an empty String if no indication of documentation is found.\n\n\n\n\n\n"
},

{
    "location": "#DocSeeker.docsurl-Tuple{Any}",
    "page": "Home",
    "title": "DocSeeker.docsurl",
    "category": "method",
    "text": "docsurl(pkg) -> String\n\nReturn the most likely candidate for a package\'s online documentation or an empty string.\n\n\n\n\n\n"
},

{
    "location": "#DocSeeker.finddocsURL-Tuple{Any}",
    "page": "Home",
    "title": "DocSeeker.finddocsURL",
    "category": "method",
    "text": "finddocsURL(pkg) -> Vector{Markdown.Link}\n\nSearch pkgs readme for links to documentation.\n\n\n\n\n\n"
},

{
    "location": "#DocSeeker.loaddocsdb-Tuple{}",
    "page": "Home",
    "title": "DocSeeker.loaddocsdb",
    "category": "method",
    "text": "loaddocsdb() -> Vector{DocObj}\n\nRetrieve the docstrings from the \"database\" created by createdocsdb(). Will return an empty vector if the database is locked by createdocsdb().\n\n\n\n\n\n"
},

{
    "location": "#DocSeeker.score",
    "page": "Home",
    "title": "DocSeeker.score",
    "category": "function",
    "text": "score(needle, s::Docs.DocObj) -> Float\n\nScores s against the search query needle. Returns a Float between 0 and 1.\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [DocSeeker]\nOrder = [:type, :function]"
},

]}
