var documenterSearchIndex = {"docs": [

{
    "location": "#InPlace.inclusiveinplace!-Tuple{Any,Any,Vararg{Any,N} where N}",
    "page": "Home",
    "title": "InPlace.inclusiveinplace!",
    "category": "method",
    "text": "a = inclusiveinplace!(op, a, b...)\n\nCompute and return op(a, b...). If a is mutable, possibly modify its value in-place.\n\nIn the case where a is mutable, it is an implementation detail whether its value is actually modified, and for this reason, one should always also assign the result of this call to a. Moreover, one should use it only on values for which the current stackframe holds the only reference; e.g. by using deepcopy.\n\n\n\n\n\n"
},

{
    "location": "#InPlace.inplace!-Tuple{Any,Any,Vararg{Any,N} where N}",
    "page": "Home",
    "title": "InPlace.inplace!",
    "category": "method",
    "text": "a = inplace!(op, a, b...)\n\nCompute and return op(b...). If a is mutable, possibly modify its value in-place.\n\nIn the case where a is mutable, it is an implementation detail whether its value is actually modified, and for this reason, one should always also assign the result of this call to a. Moreover, one should use it only on values for which the current stackframe holds the only reference; e.g. by using deepcopy.\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [InPlace]\nOrder = [:type, :function]"
},

]}
