var documenterSearchIndex = {"docs": [

{
    "location": "#BracedErrors.bracederror-Union{Tuple{N}, Tuple{Real,Tuple{Vararg{Real,N}}}} where N",
    "page": "Home",
    "title": "BracedErrors.bracederror",
    "category": "method",
    "text": "bracederror(μ::Real, σ::NTuple{N,Real}; dec::Int = 2, suff::NTuple{N,String} = ntuple(i->\"\", N), bracket::NTuple{N,Symbol} = ntuple(i->:r, N)) Providing a value μ and a tuple of errors σ it creates a string with the value followed by the errors in brackets.\n\nThis notation is commonly used in sciencific papers and this function provide an automated way of getting the appropriate string.\n\nKeyword Arguments\n\ndec::Int = 2: number of decimals to round the errors to\nsuff::NTuple{AbstractString} = (\"\",): optional suffix after the brackets\nbracket::NTuple{Symbol} = :r: type of the brackets\ndelim = \".\": the delimeter string\n\nbracket can take the values: Symbol[:a, :l, :^, :, :s, :r, :q] which correspond to [\"<\", \"|\", \"^{\", \"{\", \"[\", \"(\", \"{\"].\n\nFor conviniece following method are also added: bracederror(μ::Real, σ::Real; dec::Int = 2, suff::String = \"\", bracket::Symbol = :r, kwargs...) bracederror(μ::Real, σ::Real...; dec::Int = 2, suff = ntuple(i->\"\",length(σ)), bracket = ntuple(i->:r, length(σ)), kwargs...)\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [BracedErrors]\nOrder = [:type, :function]"
},

]}
