var documenterSearchIndex = {"docs": [

{
    "location": "#D3Trees.D3Tree-Tuple{AbstractArray{#s33,1} where #s33<:(AbstractArray{T,1} where T)}",
    "page": "Home",
    "title": "D3Trees.D3Tree",
    "category": "method",
    "text": "D3Tree(children, <keyword arguments>)\n\nConstruct a tree to be displayed using D3 in a browser or ipython notebook, specifying structure with lists of children indices.\n\nArguments\n\nRequired\n\nchildren::Vector{Vector{Int}}: List of children for each node. E.g.\nD3Tree([[2,3], [], [4], []])\ncreates a tree with four nodes. Nodes 2 and 3 are children of node 1, and node 4 is the only child of node 3. Nodes 2 and 4 are childless.\n\nKeyword:\n\ntext::Vector{String} - text to appear under each node.\ntooltip::Vector{String} - text to appear when hovering over each node.\nstyle::Vector{String} - html style for each node.\nlink_style::Vector{String} - html style for each link.\ntitle::String - html title.\ninit_expand::Integer - levels to expand initially.\ninit_duration::Number - duration of the initial animation in ms.\nsvg_height::Number - height of the svg containing the tree in px.\n\n\n\n\n\n"
},

{
    "location": "#D3Trees.D3Tree-Tuple{Any}",
    "page": "Home",
    "title": "D3Trees.D3Tree",
    "category": "method",
    "text": "D3Tree(node; detect_repeat=true, kwargs...)\n\nConstruct a tree to be displayed using D3 in a browser or ipython notebook with any object, node, that implements the AbstractTrees interface.\n\nThe style may be controlled by implementing the following functions, which should return Strings for the nodes:\n\nD3Trees.text(node)\nD3Trees.tooltip(node)\nD3Trees.style(node)\nD3Trees.link_style(node)\n\nArguments\n\nRequired\n\nnode: an object that has AbstractTrees.children(node) and AbstractTrees.printnode(io::IO, node)\n\nKeyword\n\ndetect_repeat: if true, uses a dictionary to detect whether a node has appeared previously\nAlso supports, the non-vector arguments of the vector-of-vectors D3Tree constructor, i.e. title, init_expand, init_duration, svg_height.\n\n\n\n\n\n"
},

{
    "location": "#D3Trees.inbrowser-Tuple{D3Tree,Cmd}",
    "page": "Home",
    "title": "D3Trees.inbrowser",
    "category": "method",
    "text": "inbrowser(t::D3Tree, command::Cmd)\n\nOpen an html document with the D3Tree in a program launched with the specified command.\n\n\n\n\n\n"
},

{
    "location": "#D3Trees.inbrowser-Tuple{D3Tree,String}",
    "page": "Home",
    "title": "D3Trees.inbrowser",
    "category": "method",
    "text": "inbrowser(t::D3Tree, browsername::String)\n\nOpen an html document with the D3Tree in a browser with a platform-specific command.\n\n\n\n\n\n"
},

{
    "location": "#D3Trees.link_style-Tuple{Any}",
    "page": "Home",
    "title": "D3Trees.link_style",
    "category": "method",
    "text": "D3Trees.link_style(n)\n\nReturn the html style for the link leading to the D3Trees node corresponding to AbstractTrees node n\n\n\n\n\n\n"
},

{
    "location": "#D3Trees.style-Tuple{Any}",
    "page": "Home",
    "title": "D3Trees.style",
    "category": "method",
    "text": "D3Trees.style(n)\n\nReturn the html style for the D3Trees node corresponding to AbstractTrees node n\n\n\n\n\n\n"
},

{
    "location": "#D3Trees.text-Tuple{Any}",
    "page": "Home",
    "title": "D3Trees.text",
    "category": "method",
    "text": "D3Trees.text(n)\n\nReturn the text to be displayed at the D3Trees node corresponding to AbstractTrees node n\n\n\n\n\n\n"
},

{
    "location": "#D3Trees.tooltip-Tuple{Any}",
    "page": "Home",
    "title": "D3Trees.tooltip",
    "category": "method",
    "text": "D3Trees.tooltip(n)\n\nReturn the text to be displayed in the tooltip for the D3Trees node corresponding to AbstractTrees node n\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [D3Trees]\nOrder = [:type, :function]"
},

]}
