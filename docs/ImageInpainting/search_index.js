var documenterSearchIndex = {"docs": [

{
    "location": "#ImageInpainting.Crimisini",
    "page": "Home",
    "title": "ImageInpainting.Crimisini",
    "category": "type",
    "text": "Crimisini(tilesize)\n\nExamplar-based inpainting based on confidence and isophote maps. tilesize is the patch size as a tuple of integers.\n\nReferences\n\nCrimisini, A., PÃ©rez, P., Toyama, K., 2004. Region Filling and Object Removal by Examplar-based Image Inpainting.\n\n\n\n\n\n"
},

{
    "location": "#ImageInpainting.inpaint-Tuple{AbstractArray,BitArray,ImageInpainting.InpaintAlgo}",
    "page": "Home",
    "title": "ImageInpainting.inpaint",
    "category": "method",
    "text": "inpaint(img, mask, algo)\n\nInpaint img on pixels marked as true in mask using algorithm algo.\n\n\n\n\n\n"
},

{
    "location": "#ImageInpainting.InpaintAlgo",
    "page": "Home",
    "title": "ImageInpainting.InpaintAlgo",
    "category": "type",
    "text": "InpaintAlgo\n\nAn inpainting algorithm with given parameters.\n\n\n\n\n\n"
},

{
    "location": "#ImageInpainting.convdist-Tuple{AbstractArray,AbstractArray}",
    "page": "Home",
    "title": "ImageInpainting.convdist",
    "category": "method",
    "text": "convdist(img, kern; [weights])\n\nCompute distance between all subimages of img and kern. Optionally, activate/deactivate pixels in the kern using weights.\n\n\n\n\n\n"
},

{
    "location": "#ImageInpainting.imfilter_cpu-Union{Tuple{N}, Tuple{K}, Tuple{T}, Tuple{AbstractArray{T,N},AbstractArray{K,N}}} where N where K<:Real where T<:Real",
    "page": "Home",
    "title": "ImageInpainting.imfilter_cpu",
    "category": "method",
    "text": "imfilter_cpu(img, kern)\n\nPerform filtering on img with kernel kern using the FFT algorithm.\n\n\n\n\n\n"
},

{
    "location": "#ImageInpainting.pointgradients-Tuple{AbstractArray,AbstractArray{T,1} where T}",
    "page": "Home",
    "title": "ImageInpainting.pointgradients",
    "category": "method",
    "text": "pointgradients(img, points; [method])\n\nCompute the gradients along all dimensions of N-dimensional img at points using method. Default method is :ando3.\n\n\n\n\n\n"
},

{
    "location": "#ImageInpainting.selectpatch-Tuple{Any,Any,Any}",
    "page": "Home",
    "title": "ImageInpainting.selectpatch",
    "category": "method",
    "text": "selectpatch(imgs, tilesize, center)\n\nHelper function to extract a patch of size tilesize from imgs centered at Cartesian index center.\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [ImageInpainting]\nOrder = [:type, :function]"
},

]}
