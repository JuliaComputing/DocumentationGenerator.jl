var documenterSearchIndex = {"docs": [

{
    "location": "#Counters.Counter",
    "page": "Home",
    "title": "Counters.Counter",
    "category": "type",
    "text": "A Counter is a device for keeping a count of how often we observe various objects. It is created by giving a type such as c=Counter{String}().\n\nCounts are retrieved with square brackets like a dictionary: c[\"hello\"]. It is safe to retrieve the count of an object never encountered, e.g., c[\"goodbye\"]; in this case 0 is returned.\n\nCounts may be assigned with c[key]=amount, but the more likely use case is using c[key]+=1 to count each time key is encountered.\n\n\n\n\n\n"
},

{
    "location": "#Counters.clean!-Union{Tuple{Counter{T}}, Tuple{T}} where T",
    "page": "Home",
    "title": "Counters.clean!",
    "category": "method",
    "text": "clean!(c) removes all keys from c whose value is 0. Generally, it\'s not necessary to invoke this unless one suspects that c contains a lot of keys associated with a zero value.\n\n\n\n\n\n"
},

{
    "location": "#Counters.counter-Tuple{AbstractArray}",
    "page": "Home",
    "title": "Counters.counter",
    "category": "method",
    "text": "counter(list) creates a Counter whose elements are the members of list with the appropriate multiplicities. This may also be used if list is a Set or an IntSet (in which case multiplicities will all be 1).\n\n\n\n\n\n"
},

{
    "location": "#Counters.csv_print-Tuple{Counter}",
    "page": "Home",
    "title": "Counters.csv_print",
    "category": "method",
    "text": "csv_print(C::Counter) prints out C in a manner suitable for import into a spreadsheet.\n\n\n\n\n\n"
},

{
    "location": "#Counters.incr!-Union{Tuple{T}, Tuple{Counter{T},T}} where T",
    "page": "Home",
    "title": "Counters.incr!",
    "category": "method",
    "text": "incr!(c,x) increments the count for x by 1. This is equivalent to c[x]+=1.\n\nincr!(c,items) is more useful. Here items is an iterable collection of keys and we increment the count for each element in items.\n\nincr!(c,d) where c and d are counters will increment c by the amounts held in d.\n\n\n\n\n\n"
},

{
    "location": "#Counters.mean-Union{Tuple{Counter{T}}, Tuple{T}} where T<:Number",
    "page": "Home",
    "title": "Counters.mean",
    "category": "method",
    "text": "mean(C::Counter) computes the weighted average of the objects in C. Of course, the counted objects must be a Number; their multiplicity (weight) in the average is determined by their C-value.\n\n\n\n\n\n"
},

{
    "location": "#Base.:+-Union{Tuple{T}, Tuple{Counter{T},Counter{T}}} where T",
    "page": "Home",
    "title": "Base.:+",
    "category": "method",
    "text": "If c and d are Counters, then c+d creates a new Counter in which the count associated with an object x is c[x]+d[x].\n\n\n\n\n\n"
},

{
    "location": "#Base.collect-Union{Tuple{Counter{T}}, Tuple{T}} where T",
    "page": "Home",
    "title": "Base.collect",
    "category": "method",
    "text": "collect(C) for a Counter returns an array containing the elements of C each repeated according to its multiplicty.\n\n\n\n\n\n"
},

{
    "location": "#Base.hash",
    "page": "Home",
    "title": "Base.hash",
    "category": "function",
    "text": "Performing hash on a Counter will first apply clean! to the Counter in order that equal Counter objects hash the same.\n\n\n\n\n\n"
},

{
    "location": "#Base.keys-Tuple{Counter}",
    "page": "Home",
    "title": "Base.keys",
    "category": "method",
    "text": "keys(c::Counter) returns an interator for the things counted by c.\n\n\n\n\n\n"
},

{
    "location": "#Base.length-Tuple{Counter}",
    "page": "Home",
    "title": "Base.length",
    "category": "method",
    "text": "length(c::Counter) gives the number of entries monitored by the Counter. Conceivably, some may have value 0.\n\nSee also: nnz.\n\n\n\n\n\n"
},

{
    "location": "#Base.sum-Tuple{Counter}",
    "page": "Home",
    "title": "Base.sum",
    "category": "method",
    "text": "sum(c::Counter) gives the total of the counts for all things in c.\n\n\n\n\n\n"
},

{
    "location": "#SparseArrays.nnz-Tuple{Counter}",
    "page": "Home",
    "title": "SparseArrays.nnz",
    "category": "method",
    "text": "nnz(c::Counter) gives the number of keys in the Counter with nonzero value.\n\nSee also: length.\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [Counters]\nOrder = [:type, :function]"
},

]}
