var documenterSearchIndex = {"docs": [

{
    "location": "#Deldir.deldir-Tuple{Array{Float64,1},Array{Float64,1}}",
    "page": "Home",
    "title": "Deldir.deldir",
    "category": "method",
    "text": "deldir(x::Vector, y::Vector; ...)\n\nCompute the Delaunay triangulation and Voronoi tesselation of the 2D points with x-coordinates x and y-coordinates y.\n\nOptional arguments are\n\nrw: Boundary rectangle specified as a vector with [xmin, xmax, ymin, ymax]. By default, rw is the unit rectangle.\nepsilon: A value of epsilon used in testing whether a quantity is zeros, mainly in the context of whether points are collinear.\n\nIf anomalous errors arise, it is possible that these may averted by adjusting the value of epsilon upward or downward. By default, epsilon = 1e-9.\n\nThe output are three DataFrames:\n\ndelsgs\n\nThe x1, y1, x2 & y2 entires are the coordinates of the points joined by an edge of a Delaunay triangle.\nThe ind1 and ind2 entries are the indices of the two points which are joined.\n\nvorsgs\n\nThe x1, y1, x2 & y2 entires are the coordinates of the endpoints of one the edges of a Voronoi cell.\nThe ind1 and ind2 entries are the indices of the two points, in the set being triangulated, which are separated by that edge\nThe bp1 entry indicates whether the first endpoint of the corresponding edge of a Voronoi cell is a boundary point (a point on the boundary of the rectangular window). \n\nLikewise for the bp2 entry and the second endpoint of the edge.\n\nsummary\n\nThe x and y entries of each row are the coordinates of the points in the set being triangulated.\nThe ntri entry are the number of Delaunay triangles emanating from the point.\nThe del_area entry is 1/3 of the total area of all the Delaunay triangles emanating from the point.\nThe n_tside entry is the number of sides — within the rectangular window — of the Voronoi cell surrounding the point.\nThe nbpt entry is the number of points in which the Voronoi cell intersects the boundary of the rectangular window.\nThe vor_area entry is the area of the Voronoi cell surrounding the point.\n\n\n\n\n\n"
},

{
    "location": "#Deldir.edges-Tuple{DataFrames.DataFrame}",
    "page": "Home",
    "title": "Deldir.edges",
    "category": "method",
    "text": "edges(D) -> Vector, Vector\n\nCollect the edges of a dataframe in vectors that are ready to be plotted.\n\n\n\n\n\n"
},

{
    "location": "#Deldir.voronoiarea",
    "page": "Home",
    "title": "Deldir.voronoiarea",
    "category": "function",
    "text": "voronoiarea(x::Vector, y::Vector, rw) -> Vector\n\nCompute the area of each Voronoi cell of the generators (x[i],y[i]) in the vectors x and y.\n\nrw is the boundary window.\n\n\n\n\n\n"
},

{
    "location": "#Deldir.deldirwrapper",
    "page": "Home",
    "title": "Deldir.deldirwrapper",
    "category": "function",
    "text": "deldirwrapper(x::Vector{Float64}, y::Vector{Float64}; ...)\n\nWrapper for the Fortran code that returns the output rather undigested.\n\n\n\n\n\n"
},

{
    "location": "#Deldir.remove_duplicates-Tuple{Array{T,1} where T,Array{T,1} where T}",
    "page": "Home",
    "title": "Deldir.remove_duplicates",
    "category": "method",
    "text": "remove_duplicates(x::Vector, y::Vector)\n\nRemove duplicate tuples (x[i],y[i]) from the vectors x and y.\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [Deldir]\nOrder = [:type, :function]"
},

]}
