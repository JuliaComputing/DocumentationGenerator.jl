var documenterSearchIndex = {"docs": [

{
    "location": "#DiffEqCallbacks.SavedValues",
    "page": "Home",
    "title": "DiffEqCallbacks.SavedValues",
    "category": "type",
    "text": "SavedValues{tType<:Real, savevalType}\n\nA struct used to save values of the time in t::Vector{tType} and additional values in saveval::Vector{savevalType}.\n\n\n\n\n\n"
},

{
    "location": "#DiffEqCallbacks.SavedValues-Union{Tuple{savevalType}, Tuple{tType}, Tuple{Type{tType},Type{savevalType}}} where savevalType where tType",
    "page": "Home",
    "title": "DiffEqCallbacks.SavedValues",
    "category": "method",
    "text": "SavedValues(tType::DataType, savevalType::DataType)\n\nReturn SavedValues{tType, savevalType} with empty storage vectors.\n\n\n\n\n\n"
},

{
    "location": "#DiffEqCallbacks.FunctionCallingCallback-Tuple{Any}",
    "page": "Home",
    "title": "DiffEqCallbacks.FunctionCallingCallback",
    "category": "method",
    "text": "FunctionCallingCallback(func;\n                funcat=Vector{Float64}(),\n                func_everystep=isempty(funcat),\n                func_start = true,\n                tdir=1)\n\nA DiscreteCallback applied after every step to call func(u,t,integrator) If func_everystep, every step of the integrator gives a func call. If funcat is specified, the function is called at the given times, using interpolation if necessary. If the time tdir direction is not positive, i.e. tspan[1] > tspan[2], tdir = -1 has to be specified.\n\n\n\n\n\n"
},

{
    "location": "#DiffEqCallbacks.SavingCallback-Tuple{Any,SavedValues}",
    "page": "Home",
    "title": "DiffEqCallbacks.SavingCallback",
    "category": "method",
    "text": "SavingCallback(save_func, saved_values::SavedValues;\n                saveat=Vector{eltype(saved_values.t)}(),\n                save_everystep=isempty(saveat),\n                save_start = true,\n                tdir=1)\n\nA DiscreteCallback applied after every step, saving the time t and the value of save_func(u, t, integrator) in saved_values.\n\nIf save_everystep, every step of the integrator is saved. If saveat is specified, the values are saved at the given times, using interpolation if necessary. If the time tdir direction is not positive, i.e. tspan[1] > tspan[2], tdir = -1 has to be specified.\n\n\n\n\n\n"
},

{
    "location": "#DiffEqCallbacks.affect!-Union{Tuple{uType}, Tuple{S}, Tuple{T}, Tuple{Any,AbstractDomainAffect{T,S,uType}}} where uType where S where T",
    "page": "Home",
    "title": "DiffEqCallbacks.affect!",
    "category": "method",
    "text": "affect!(integrator, f::AbstractDomainAffect)\n\nApply domain callback f to integrator.\n\n\n\n\n\n"
},

{
    "location": "#DiffEqCallbacks.isaccepted-Tuple{Any,Any,Any,Any,DiffEqCallbacks.AbstractDomainAffect,Vararg{Any,N} where N}",
    "page": "Home",
    "title": "DiffEqCallbacks.isaccepted",
    "category": "method",
    "text": "isaccepted(u, abstol, f::AbstractDomainAffect, args...)\n\nReturn whether u is an acceptable state vector at the next time point given absolute tolerance abstol, callback f, and other optional arguments.\n\n\n\n\n\n"
},

{
    "location": "#DiffEqCallbacks.modify_u!-Tuple{Any,DiffEqCallbacks.AbstractDomainAffect}",
    "page": "Home",
    "title": "DiffEqCallbacks.modify_u!",
    "category": "method",
    "text": "modify_u!(integrator, f::AbstractDomainAffect)\n\nModify current state vector u of integrator if required, and return whether it actually was modified.\n\n\n\n\n\n"
},

{
    "location": "#DiffEqCallbacks.setup-Tuple{DiffEqCallbacks.AbstractDomainAffect,Any}",
    "page": "Home",
    "title": "DiffEqCallbacks.setup",
    "category": "method",
    "text": "setup(f::AbstractDomainAffect, integrator)\n\nSetup callback f and return an arbitrary tuple whose elements are used as additional arguments in checking whether time step is accepted.\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [DiffEqCallbacks]\nOrder = [:type, :function]"
},

]}
