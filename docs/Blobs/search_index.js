var documenterSearchIndex = {"docs": [

{
    "location": "#Blobs.Blob",
    "page": "Home",
    "title": "Blobs.Blob",
    "category": "type",
    "text": "A pointer to a T stored inside a Blob.\n\n\n\n\n\n"
},

{
    "location": "#Blobs.BlobBitVector",
    "page": "Home",
    "title": "Blobs.BlobBitVector",
    "category": "type",
    "text": "A fixed-length bit vector whose data is stored in a Blob.\n\n\n\n\n\n"
},

{
    "location": "#Blobs.BlobString",
    "page": "Home",
    "title": "Blobs.BlobString",
    "category": "type",
    "text": "A string whose data is stored in a Blob.\n\n\n\n\n\n"
},

{
    "location": "#Blobs.BlobVector",
    "page": "Home",
    "title": "Blobs.BlobVector",
    "category": "type",
    "text": "A fixed-length vector whose data is stored in a Blob.\n\n\n\n\n\n"
},

{
    "location": "#Blobs.child_size-Union{Tuple{Type{T}}, Tuple{T}} where T",
    "page": "Home",
    "title": "Blobs.child_size",
    "category": "method",
    "text": "child_size(::Type{T}, args...) where {T}\n\nThe number of bytes needed to allocate children of T, not including self_size(T).\n\nDefaults to 0.\n\n\n\n\n\n"
},

{
    "location": "#Blobs.free-Tuple{Blobs.Blob}",
    "page": "Home",
    "title": "Blobs.free",
    "category": "method",
    "text": "free(blob::Blob)\n\nFree the underlying allocation for blob.\n\n\n\n\n\n"
},

{
    "location": "#Blobs.init-Union{Tuple{T}, Tuple{Blob{T},Blob{Nothing}}} where T",
    "page": "Home",
    "title": "Blobs.init",
    "category": "method",
    "text": "init(blob::Blob{T}, free::Blob{Nothing}, args...)::Blob{Nothing} where T\n\nInitialize blob, where free is the beginning of the remaining free space. Must return free + child_size(T, args...).\n\nThe default implementation where child_size(T) == 0 does nothing. Override this method to add custom initializers for your types.\n\n\n\n\n\n"
},

{
    "location": "#Blobs.init-Union{Tuple{T}, Tuple{Blob{T},Vararg{Any,N} where N}} where T",
    "page": "Home",
    "title": "Blobs.init",
    "category": "method",
    "text": "init(blob::Blob{T}, args...) where T\n\nInitialize blob.\n\nAssumes that blob it at least self_size(T) + child_size(T, args...) bytes long.\n\n\n\n\n\n"
},

{
    "location": "#Blobs.malloc-Union{Tuple{T}, Tuple{Type{T},Vararg{Any,N} where N}} where T",
    "page": "Home",
    "title": "Blobs.malloc",
    "category": "method",
    "text": "malloc(::Type{T}, args...)::Blob{T} where T\n\nAllocate an uninitialized Blob{T}.\n\n\n\n\n\n"
},

{
    "location": "#Blobs.malloc_and_init-Union{Tuple{T}, Tuple{Type{T},Vararg{Any,N} where N}} where T",
    "page": "Home",
    "title": "Blobs.malloc_and_init",
    "category": "method",
    "text": "malloc_and_init(::Type{T}, args...)::Blob{T} where T\n\nAllocate and initialize a new Blob{T}.\n\n\n\n\n\n"
},

{
    "location": "#Blobs.self_size-Union{Tuple{Type{T}}, Tuple{T}} where T",
    "page": "Home",
    "title": "Blobs.self_size",
    "category": "method",
    "text": "self_size(::Type{T}, args...) where {T}\n\nThe number of bytes needed to allocate T itself.\n\nDefaults to sizeof(T).\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [Blobs]\nOrder = [:type, :function]"
},

]}
