var documenterSearchIndex = {"docs": [

{
    "location": "#HttpCommon.Cookie",
    "page": "Home",
    "title": "HttpCommon.Cookie",
    "category": "type",
    "text": "A Cookie represents an HTTP cookie. It has three fields: name and value are strings, and attrs is dictionary of pairs of strings.\n\n\n\n\n\n"
},

{
    "location": "#HttpCommon.Headers",
    "page": "Home",
    "title": "HttpCommon.Headers",
    "category": "type",
    "text": "Headers represents the header fields for an HTTP request.\n\n\n\n\n\n"
},

{
    "location": "#HttpCommon.Request",
    "page": "Home",
    "title": "HttpCommon.Request",
    "category": "type",
    "text": "A Request represents an HTTP request sent by a client to a server. It has five fields:\n\nmethod: an HTTP methods string (e.g. \"GET\")\nresource: the resource requested (e.g. \"/hello/world\")\nheaders: see Headers above\ndata: the request data as a vector of bytes\nuri: additional details, normally not used\n\n\n\n\n\n"
},

{
    "location": "#HttpCommon.Response",
    "page": "Home",
    "title": "HttpCommon.Response",
    "category": "type",
    "text": "A Response represents an HTTP response sent to a client by a server. It has six fields:\n\nstatus: HTTP status code (see STATUS_CODES) [default: 200]\nheaders: Headers [default: HttpCommmon.headers()]\ncookies: Dictionary of strings => Cookies\ndata: the request data as a vector of bytes [default: UInt8[]]\nfinished: true if the Reponse is valid, meaning that it can be converted to an actual HTTP response [default: false]\nrequests: the history of requests that generated the response. Can be greater than one if a redirect was involved.\n\nResponse has many constructors - use methods(Response) for full list.\n\n\n\n\n\n"
},

{
    "location": "#HttpCommon.escapeHTML-Tuple{String}",
    "page": "Home",
    "title": "HttpCommon.escapeHTML",
    "category": "method",
    "text": "escapeHTML(i::String)\n\nReturns a string with special HTML characters escaped: &, <, >, \", \'\n\n\n\n\n\n"
},

{
    "location": "#HttpCommon.parsequerystring-Union{Tuple{T}, Tuple{T}} where T<:AbstractString",
    "page": "Home",
    "title": "HttpCommon.parsequerystring",
    "category": "method",
    "text": "parsequerystring(query::String)\n\nConvert a valid querystring to a Dict:\n\nq = \"foo=bar&baz=%3Ca%20href%3D%27http%3A%2F%2Fwww.hackershool.com%27%3Ehello%20world%21%3C%2Fa%3E\"\nparsequerystring(q)\n# Dict{String,String} with 2 entries:\n#   \"baz\" => \"<a href=\'http://www.hackershool.com\'>hello world!</a>\"\n#   \"foo\" => \"bar\"\n\n\n\n\n\n"
},

{
    "location": "#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": "Package doesn\'t contain Documenter docs.Docs automatically generated by juliadocs.orgModules = [HttpCommon]\nOrder = [:type, :function]"
},

]}
